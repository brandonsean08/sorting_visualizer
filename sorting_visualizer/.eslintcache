[{"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/reportWebVitals.js":"1","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/index.js":"2","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/App.js":"3","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Components/Header/Header.js":"4","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Components/Charts/BarChart/BarChart.js":"5","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Reducers/rootReducer.js":"6","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Alogrithms/BubbleSort.js":"7"},{"size":362,"mtime":1603469289000,"results":"8","hashOfConfig":"9"},{"size":921,"mtime":1606214687331,"results":"10","hashOfConfig":"9"},{"size":261,"mtime":1606213956250,"results":"11","hashOfConfig":"9"},{"size":5651,"mtime":1606304842106,"results":"12","hashOfConfig":"9"},{"size":4839,"mtime":1606304436776,"results":"13","hashOfConfig":"9"},{"size":1538,"mtime":1606304693756,"results":"14","hashOfConfig":"9"},{"size":247,"mtime":1606232337360,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1cjlg6w",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/reportWebVitals.js",[],["33","34"],"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/index.js",["35","36"],"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/App.js",[],"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Components/Header/Header.js",["37","38","39","40","41","42","43","44"],"import { React, Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Header.css\";\n\nclass Header extends Component {\n  state = {\n    inputSize: 20,\n    isInputValid: true,\n  };\n\n  /**\n   * Method to validate whether our array is between 0 and 100\n   * @param {The size of our unsorted array} inputSize \n   */\n  isValidInputSize(inputSize) {\n    while (inputSize >= 0 && inputSize <= 100) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Dispatches the action to set our input size in the store\n   * @param {*} event \n   */\n  setAppInputSize = (event) => {\n    let inputSize = event.target.value;\n    if (this.isValidInputSize(inputSize)) {\n      this.setState({\n        inputSize: inputSize,\n        isInputValid: true,\n      });\n      this.props.dispatch({\n        type: \"SET_INPUT_SIZE\",\n        payload: inputSize,\n      });\n      this.props.dispatch({\n        type: \"SET_DATA\",\n        payload: inputSize,\n      });\n    } else {\n      this.setState({\n        isInputValid: false,\n      });\n    }\n  };\n\n  /**\n   * Method to dispatch the action to set the algorithm we want to run\n   * @param {The algorithm we want to run} algorithm \n   */\n  setAppAlgorithm = (algorithm) => {\n    this.setState({\n      algorithm: algorithm,\n    });\n    this.props.dispatch({\n      type: \"SET_ALGORITHM\",\n      payload: algorithm,\n    });\n  };\n\n  /**\n   * Method to dispatch the action to run the actual algorithm\n   */\n  runAlgorithm() {\n    this.props.dispatch({\n      type: \"TOGGLE_ALGORITHM_RUNNING\",\n      payload: true,\n    });\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg\">\n        <a className=\"navbar-brand\" href={this.props.isAlgorithmRunning ? '' : '#'}>\n          Sorting Visualizer\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Input Size\n              </a>\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <a className=\"dropdown-item\">\n                  <label>Input size</label>\n                </a>\n                <a className=\"dropdown-item\">\n                  <input\n                    className={\n                      this.state.isInputValid === true\n                        ? \"form-control is-valid\"\n                        : \"form-control is-invalid\"\n                    }\n                    placeholder=\"size\"\n                    value={this.state.inputSize}\n                    onChange={(event) => this.setAppInputSize(event)}\n                    disabled={this.props.isAlgorithmRunning}\n                  />\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\">\n                  <div className=\"\">\n                    <div>\n                      <input\n                        type=\"range\"\n                        value={this.state.inputSize}\n                        className=\"custom-range\"\n                        min=\"5\"\n                        max=\"100\"\n                        step=\"1\"\n                        onChange={(event) => this.setAppInputSize(event)}\n                        disabled={this.props.isAlgorithmRunning}\n                      />\n                    </div>\n                  </div>\n                </a>\n              </div>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Algorithm\n              </a>\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <a\n                  className=\"dropdown-item\"\n                  onClick={() => this.setAppAlgorithm(\"Bubble Sort\")}\n                >\n                  <label className=\"dropdown-item-label\">Bubble Sort</label>\n                </a>\n                <a\n                  className=\"dropdown-item\"\n                  onClick={() => this.setAppAlgorithm(\"Selection Sort\")}\n                >\n                  <label className=\"dropdown-item-label\">Selection Sort</label>\n                </a>\n              </div>\n            </li>\n          </ul>\n          <div>\n            <button\n              className=\"btn btn-warning run-algorithm-btn\"\n              onClick={() => this.runAlgorithm()}\n              disabled={this.props.isAlgorithmRunning}\n            >\n              Run\n            </button>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    inputSize: state.inputSize,\n    algorithm: state.algorithm,\n    data: state.data,\n    isAlgorithmRunning: state.isAlgorithmRunning\n  };\n};\n\nexport default connect(mapStateToProps)(Header);\n","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Components/Charts/BarChart/BarChart.js",["45"],"import React, { Component } from \"react\";\nimport \"./BarChart.css\";\nimport { Bar } from \"react-chartjs-2\";\nimport { connect } from \"react-redux\";\n\nclass BarChart extends Component {\n  state = {\n    inputSize: this.props.inputSize,\n    data: this.props.data,\n    isAlgorithmRunning: this.props.isAlgorithmRunning,\n    barChartDefaultOptions: {\n      legend: {\n        display: false,\n      },\n      scales: {\n        xAxes: [\n          {\n            gridLines: {\n              display: false,\n            },\n          },\n        ],\n        yAxes: [\n          {\n            gridLines: {\n              display: false,\n            },\n          },\n        ],\n      },\n    },\n  };\n\n  /**\n   * Method to sleep for a given time\n   * @param {The time we want to sleep for} ms\n   */\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * method to perform the actual bubble sort\n   * @param {The original array that we want to sort (i.e. The unsorted array)} originalData\n   */\n  async runBubbleSort(originalData) {\n    // Extracting the variables that we need to work with\n    let len = originalData.datasets[0].data.length;\n    let datasetsCopy = originalData.datasets.slice(0);\n    let dataArrayCopy = datasetsCopy[0].data;\n    let backgroundColorsArrayCopy = datasetsCopy[0].backgroundColor;\n\n    // Declaring the two indeces needed for our array\n    let i = 0;\n    let j = 0;\n\n    // Starting the actual Bubble Sort\n    for (i = 0; i < len - 1; i++) {\n      for (j = 0; j < len - 1 - i; j++) {\n        // Changing the colors\n        backgroundColorsArrayCopy[j + 1] = \"#F6D55C\";\n        backgroundColorsArrayCopy[j + 2] = \"#ED553B\";\n        if (dataArrayCopy[j] > dataArrayCopy[j + 1]) {\n          // Doing the swap\n          let tmp = dataArrayCopy[j];\n          dataArrayCopy[j] = dataArrayCopy[j + 1];\n          dataArrayCopy[j + 1] = tmp;\n          // Changing the colors back after the swap\n          backgroundColorsArrayCopy[j - 1] = \"#28363D\";\n          backgroundColorsArrayCopy[j] = \"#28363D\";\n        } else {\n          // Changing the colors if they do not swap\n          backgroundColorsArrayCopy[j] = \"#28363D\";\n        }\n        //Setting the copied arrays of values and colors back to the original array so that setState recognises the deep change\n        originalData.datasets[0].data = dataArrayCopy;\n        originalData.datasets[0].backgroundColor = backgroundColorsArrayCopy;\n        this.setState({\n          data: {},\n        });\n        this.setState({\n          data: Object.assign({}, originalData.data, {\n            datasets: datasetsCopy,\n          }),\n        });\n        // Sleeping for 0.5s\n        await this.sleep(500);\n      }\n      // Setting the colors of the values that we have already checked\n      backgroundColorsArrayCopy[backgroundColorsArrayCopy.length - i - 1] =\n        \"#3CAEA3\";\n      backgroundColorsArrayCopy[backgroundColorsArrayCopy.length - i - 2] =\n        \"#3CAEA3\";\n    }\n    //Setting the first index to checked once we have completed the entire sort\n    backgroundColorsArrayCopy[0] = \"#3CAEA3\";\n    this.setState({\n      data: {},\n    });\n    this.setState({\n      data: Object.assign({}, originalData.data, {\n        datasets: datasetsCopy,\n      }),\n    });\n    // Indicate that we have completed the sort\n    this.props.dispatch({\n      type: \"TOGGLE_ALGORITHM_RUNNING\",\n      payload: false,\n    });\n  }\n\n  /**\n   * Listening for a redux store change in the props\n   * @param {The props that our component has recieved when the redux store changes} nextProps\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.data !== nextProps.data) {\n      this.setState({\n        data: nextProps.data,\n      });\n    }\n    if (this.props.isAlgorithmRunning !== nextProps.isAlgorithmRunning) {\n      this.setState({\n        isAlgorithmRunning: nextProps.isAlgorithmRunning,\n      });\n      if (nextProps.isAlgorithmRunning) {\n        switch (nextProps.algorithm) {\n          case \"Bubble Sort\":\n            this.runBubbleSort(this.props.data);\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Dispatching the action to set the data array when the chart loads\n   */\n  componentDidMount() {\n    this.props.dispatch({\n      type: \"SET_DATA\",\n      payload: this.state.inputSize,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"bar-chart-canvas\">\n        <h3 className=\"text-center\">Visualizing: {this.props.algorithm}</h3>\n        <Bar\n          data={this.state.data}\n          options={this.state.barChartDefaultOptions}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    inputSize: state.inputSize,\n    algorithm: state.algorithm,\n    data: state.data,\n    isAlgorithmRunning: state.isAlgorithmRunning,\n  };\n};\n\nexport default connect(mapStateToProps)(BarChart);\n","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Reducers/rootReducer.js",["46"],"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Alogrithms/BubbleSort.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":5,"column":8,"nodeType":"53","messageId":"54","endLine":5,"endColumn":9},{"ruleId":"51","severity":1,"message":"55","line":6,"column":8,"nodeType":"53","messageId":"54","endLine":6,"endColumn":14},{"ruleId":"56","severity":1,"message":"57","line":75,"column":9,"nodeType":"58","endLine":75,"endColumn":85},{"ruleId":"56","severity":1,"message":"57","line":93,"column":15,"nodeType":"58","endLine":101,"endColumn":16},{"ruleId":"56","severity":1,"message":"59","line":105,"column":17,"nodeType":"58","endLine":105,"endColumn":46},{"ruleId":"56","severity":1,"message":"59","line":108,"column":17,"nodeType":"58","endLine":108,"endColumn":46},{"ruleId":"56","severity":1,"message":"59","line":122,"column":17,"nodeType":"58","endLine":122,"endColumn":46},{"ruleId":"56","severity":1,"message":"57","line":141,"column":15,"nodeType":"58","endLine":149,"endColumn":16},{"ruleId":"56","severity":1,"message":"59","line":153,"column":17,"nodeType":"58","endLine":156,"endColumn":18},{"ruleId":"56","severity":1,"message":"59","line":159,"column":17,"nodeType":"58","endLine":162,"endColumn":18},{"ruleId":"60","severity":1,"message":"61","line":130,"column":11,"nodeType":"62","messageId":"63","endLine":131,"endColumn":19},{"ruleId":"51","severity":1,"message":"64","line":1,"column":10,"nodeType":"53","messageId":"54","endLine":1,"endColumn":20},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'sortBubble' is defined but never used.","no-global-assign","no-unsafe-negation"]