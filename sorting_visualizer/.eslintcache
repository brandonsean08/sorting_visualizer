[{"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/reportWebVitals.js":"1","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/index.js":"2","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/App.js":"3","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Components/Header/Header.js":"4","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Components/Charts/BarChart/BarChart.js":"5","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Reducers/rootReducer.js":"6","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Alogrithms/BubbleSort.js":"7"},{"size":362,"mtime":1603469289000,"results":"8","hashOfConfig":"9"},{"size":921,"mtime":1606214687331,"results":"10","hashOfConfig":"9"},{"size":261,"mtime":1606213956250,"results":"11","hashOfConfig":"9"},{"size":8373,"mtime":1606306225061,"results":"12","hashOfConfig":"9"},{"size":4925,"mtime":1606305720638,"results":"13","hashOfConfig":"9"},{"size":1587,"mtime":1606305771648,"results":"14","hashOfConfig":"9"},{"size":247,"mtime":1606232337360,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1cjlg6w",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/reportWebVitals.js",[],["32","33"],"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/index.js",["34","35"],"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/App.js",[],"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Components/Header/Header.js",["36","37","38","39","40","41","42","43","44","45","46","47"],"import { React, Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Header.css\";\n\nclass Header extends Component {\n  state = {\n    inputSize: 20,\n    sortSpeed: 500,\n    isInputSizeValid: true,\n    isSortSpeedValid: true\n  };\n\n  /**\n   * Method to validate whether our array is between 0 and 100\n   * @param {The size of our unsorted array} inputSize \n   */\n  isValidInputSize(inputSize) {\n    while (inputSize >= 0 && inputSize <= 100) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Method to set how long each iteration of the loop takes (i.e. The sort speed)\n   * @param {The speed at which the array sorts} sortSpeed \n   */\n  isValidSortSpeed(sortSpeed) {\n    while (sortSpeed >= 0 && sortSpeed <= 3000) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Dispatches the action to set our input size in the store\n   * @param {*} event \n   */\n  setAppInputSize = (event) => {\n    let inputSize = event.target.value;\n    if (this.isValidInputSize(inputSize)) {\n      this.setState({\n        inputSize: inputSize,\n        isInputSizeValid: true,\n      });\n      this.props.dispatch({\n        type: \"SET_INPUT_SIZE\",\n        payload: inputSize,\n      });\n      this.props.dispatch({\n        type: \"SET_DATA\",\n        payload: inputSize,\n      });\n    } else {\n      this.setState({\n        isInputSizeValid: false,\n      });\n    }\n  };\n\n  /**\n   * Dispatches the action to change the sort speed of our sort\n   * @param {*} event \n   */\n  setAppSortSpeed = (event) => {\n      let sortSpeed = event.target.value;\n      if(this.isValidSortSpeed(sortSpeed)) {\n          this.setState({\n              isSortSpeedValid: true\n          })\n          this.props.dispatch({\n              type: \"SET_SORT_SPEED\",\n              payload: sortSpeed\n          })\n      } else {\n        this.setState({\n            isSortSpeedValid: false\n        })\n      }\n  }\n\n  /**\n   * Method to dispatch the action to set the algorithm we want to run\n   * @param {The algorithm we want to run} algorithm \n   */\n  setAppAlgorithm = (algorithm) => {\n    this.setState({\n      algorithm: algorithm,\n    });\n    this.props.dispatch({\n      type: \"SET_ALGORITHM\",\n      payload: algorithm,\n    });\n  };\n\n  /**\n   * Method to dispatch the action to run the actual algorithm\n   */\n  runAlgorithm() {\n    this.props.dispatch({\n      type: \"TOGGLE_ALGORITHM_RUNNING\",\n      payload: true,\n    });\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg\">\n        <a className=\"navbar-brand\" href={this.props.isAlgorithmRunning ? '' : '#'}>\n          Sorting Visualizer\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Input Size\n              </a>\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <a className=\"dropdown-item\">\n                  <label>Input size</label>\n                </a>\n                <a className=\"dropdown-item\">\n                  <input\n                    className={\n                      this.state.isInputSizeValid === true\n                        ? \"form-control is-valid\"\n                        : \"form-control is-invalid\"\n                    }\n                    placeholder=\"size\"\n                    value={this.state.inputSize}\n                    onChange={(event) => this.setAppInputSize(event)}\n                    disabled={this.props.isAlgorithmRunning}\n                  />\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\">\n                  <div className=\"\">\n                    <div>\n                      <input\n                        type=\"range\"\n                        value={this.state.inputSize}\n                        className=\"custom-range\"\n                        min=\"5\"\n                        max=\"100\"\n                        step=\"1\"\n                        onChange={(event) => this.setAppInputSize(event)}\n                        disabled={this.props.isAlgorithmRunning}\n                      />\n                    </div>\n                  </div>\n                </a>\n              </div>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Algorithm\n              </a>\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <a\n                  className=\"dropdown-item\"\n                  onClick={() => this.setAppAlgorithm(\"Bubble Sort\")}\n                >\n                  <label className=\"dropdown-item-label\">Bubble Sort</label>\n                </a>\n                <a\n                  className=\"dropdown-item\"\n                  onClick={() => this.setAppAlgorithm(\"Selection Sort\")}\n                >\n                  <label className=\"dropdown-item-label\">Selection Sort</label>\n                </a>\n              </div>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Speed\n              </a>\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <a className=\"dropdown-item\">\n                  <label>Speed of Sort</label>\n                </a>\n                <a className=\"dropdown-item\">\n                  <input\n                    className={\n                      this.state.isSortSpeedValid === true\n                        ? \"form-control is-valid\"\n                        : \"form-control is-invalid\"\n                    }\n                    placeholder=\"speed\"\n                    value={this.state.sortSpeed}\n                    onChange={(event) => this.setAppSortSpeed(event)}\n                    disabled={this.props.isAlgorithmRunning}\n                  />\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\">\n                  <div className=\"\">\n                    <div>\n                      <input\n                        type=\"range\"\n                        value={this.state.sortSpeed}\n                        className=\"custom-range\"\n                        min=\"0\"\n                        max=\"3000\"\n                        step=\"100\"\n                        onChange={(event) => this.setAppSortSpeed(event)}\n                        disabled={this.props.isAlgorithmRunning}\n                      />\n                    </div>\n                  </div>\n                </a>\n              </div>\n            </li>\n          </ul>\n          <div>\n            <button\n              className=\"btn btn-warning run-algorithm-btn\"\n              onClick={() => this.runAlgorithm()}\n              disabled={this.props.isAlgorithmRunning}\n            >\n              Run\n            </button>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    inputSize: state.inputSize,\n    sortSpeed: state.sortSpeed,\n    algorithm: state.algorithm,\n    data: state.data,\n    isAlgorithmRunning: state.isAlgorithmRunning\n  };\n};\n\nexport default connect(mapStateToProps)(Header);\n","/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Components/Charts/BarChart/BarChart.js",["48"],"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Reducers/rootReducer.js",[],"/Users/brandon.coetzee/OneDrive - insidemedia.net/Development/Personal/sorting_visualizer/sorting_visualizer/src/Alogrithms/BubbleSort.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":5,"column":8,"nodeType":"55","messageId":"56","endLine":5,"endColumn":9},{"ruleId":"53","severity":1,"message":"57","line":6,"column":8,"nodeType":"55","messageId":"56","endLine":6,"endColumn":14},{"ruleId":"58","severity":1,"message":"59","line":109,"column":9,"nodeType":"60","endLine":109,"endColumn":85},{"ruleId":"58","severity":1,"message":"59","line":127,"column":15,"nodeType":"60","endLine":135,"endColumn":16},{"ruleId":"58","severity":1,"message":"61","line":139,"column":17,"nodeType":"60","endLine":139,"endColumn":46},{"ruleId":"58","severity":1,"message":"61","line":142,"column":17,"nodeType":"60","endLine":142,"endColumn":46},{"ruleId":"58","severity":1,"message":"61","line":156,"column":17,"nodeType":"60","endLine":156,"endColumn":46},{"ruleId":"58","severity":1,"message":"59","line":175,"column":15,"nodeType":"60","endLine":183,"endColumn":16},{"ruleId":"58","severity":1,"message":"61","line":187,"column":17,"nodeType":"60","endLine":190,"endColumn":18},{"ruleId":"58","severity":1,"message":"61","line":193,"column":17,"nodeType":"60","endLine":196,"endColumn":18},{"ruleId":"58","severity":1,"message":"59","line":202,"column":15,"nodeType":"60","endLine":210,"endColumn":16},{"ruleId":"58","severity":1,"message":"61","line":214,"column":17,"nodeType":"60","endLine":214,"endColumn":46},{"ruleId":"58","severity":1,"message":"61","line":217,"column":17,"nodeType":"60","endLine":217,"endColumn":46},{"ruleId":"58","severity":1,"message":"61","line":231,"column":17,"nodeType":"60","endLine":231,"endColumn":46},{"ruleId":"62","severity":1,"message":"63","line":131,"column":11,"nodeType":"64","messageId":"65","endLine":132,"endColumn":19},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-global-assign","no-unsafe-negation"]